{
	"name": "silverUpdate",
	"properties": {
		"folder": {
			"name": "movie"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "bronze_movie_tmp",
						"type": "DatasetReference"
					},
					"name": "bronze"
				},
				{
					"dataset": {
						"referenceName": "silver_movie_tmp",
						"type": "DatasetReference"
					},
					"name": "silver"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "silver_movie",
						"type": "DatasetReference"
					},
					"name": "updateSilver"
				},
				{
					"dataset": {
						"referenceName": "bronze_movie",
						"type": "DatasetReference"
					},
					"name": "updateBronze"
				}
			],
			"transformations": [
				{
					"name": "filterLoaded"
				},
				{
					"name": "select1"
				},
				{
					"name": "parseJson"
				},
				{
					"name": "flattenJson"
				},
				{
					"name": "addForeignKeys"
				},
				{
					"name": "select2"
				},
				{
					"name": "filterBudget"
				},
				{
					"name": "filterRuntime"
				},
				{
					"name": "repairRuntime"
				},
				{
					"name": "repairBudget"
				},
				{
					"name": "unionRepaired"
				},
				{
					"name": "unionSilver"
				},
				{
					"name": "distinctRaw"
				},
				{
					"name": "statusLoaded"
				}
			],
			"scriptLines": [
				"source(output(",
				"          value as string,",
				"          datasource as string,",
				"          ingestdate as date,",
				"          ingesttime as timestamp,",
				"          status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> bronze",
				"source(output(",
				"          value as string,",
				"          movie_id as integer,",
				"          title as string,",
				"          overview as string,",
				"          tagline as string,",
				"          budget as double,",
				"          revenue as double,",
				"          imdb_url as string,",
				"          tmdb_url as string,",
				"          poster_url as string,",
				"          backdrop_url as string,",
				"          original_language_id as integer,",
				"          release_date as date,",
				"          runtime as integer,",
				"          price as double,",
				"          created_date as date,",
				"          genre_id as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> silver",
				"bronze filter(status == \"quarantined\") ~> filterLoaded",
				"filterLoaded select(mapColumn(",
				"          value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 parse(nested_json = value ? (Id as integer,     Title as string,     Overview as string,     Tagline as string,     Budget as double,     Revenue as double,     ImdbUrl as string,     TmdbUrl as string,     PosterUrl as string,     BackdropUrl as string,     OriginalLanguage as string,     ReleaseDate as date,     RunTime as integer,     Price as double,     CreatedDate as date,     genres as (id as integer,     name as string)[])[],",
				"     format: 'json',",
				"     documentForm: 'documentPerLine') ~> parseJson",
				"parseJson foldDown(unroll(nested_json),",
				"     mapColumn(",
				"          value,",
				"          Id = nested_json.Id,",
				"          Title = nested_json.Title,",
				"          Overview = nested_json.Overview,",
				"          Tagline = nested_json.Tagline,",
				"          Budget = nested_json.Budget,",
				"          Revenue = nested_json.Revenue,",
				"          ImdbUrl = nested_json.ImdbUrl,",
				"          TmdbUrl = nested_json.TmdbUrl,",
				"          PosterUrl = nested_json.PosterUrl,",
				"          BackdropUrl = nested_json.BackdropUrl,",
				"          OriginalLanguage = nested_json.OriginalLanguage,",
				"          ReleaseDate = nested_json.ReleaseDate,",
				"          RunTime = nested_json.RunTime,",
				"          Price = nested_json.Price,",
				"          CreatedDate = nested_json.CreatedDate,",
				"          genres = nested_json.genres",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenJson",
				"flattenJson derive(genre_id = toString(genres.id),",
				"          original_language_id = 1) ~> addForeignKeys",
				"addForeignKeys select(mapColumn(",
				"          value,",
				"          movie_id = Id,",
				"          title = Title,",
				"          overview = Overview,",
				"          tagline = Tagline,",
				"          budget = Budget,",
				"          revenue = Revenue,",
				"          imdb_url = ImdbUrl,",
				"          tmdb_url = TmdbUrl,",
				"          poster_url = PosterUrl,",
				"          backdrop_url = BackdropUrl,",
				"          original_language_id,",
				"          release_date = ReleaseDate,",
				"          runtime = RunTime,",
				"          price = Price,",
				"          created_date = CreatedDate,",
				"          genre_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 filter(budget < 1000000) ~> filterBudget",
				"select2 filter(runtime < 0 && budget >= 1000000) ~> filterRuntime",
				"filterRuntime derive(runtime = abs(runtime)) ~> repairRuntime",
				"filterBudget derive(budget = 1000000.00,",
				"          runtime = abs(runtime)) ~> repairBudget",
				"repairRuntime, repairBudget union(byName: true)~> unionRepaired",
				"unionRepaired, silver union(byName: true)~> unionSilver",
				"unionSilver aggregate(groupBy(value),",
				"     each(match(name!=\"value\"), $$ = first($$))) ~> distinctRaw",
				"bronze derive(status = \"loaded\") ~> statusLoaded",
				"distinctRaw sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> updateSilver",
				"statusLoaded sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> updateBronze"
			]
		}
	}
}